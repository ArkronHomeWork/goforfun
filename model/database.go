package model

import (
	"database/sql"
	"fmt"
	"log"
	"sync"

	_ "github.com/lib/pq"
)

const (
	host     = "localhost"
	port     = 5432
	user     = "postgres"
	password = "postgres"
	dbname   = "postgres"
)

type connection struct {
	*sql.DB
}

var instance *connection
var once sync.Once

func DatabaseConnect() *connection {
	once.Do(func() {
		psqlInfo := fmt.Sprintf("host=%s port=%d user=%s "+
			"password=%s dbname=%s sslmode=disable",
			host, port, user, password, dbname)
		db, err := sql.Open("postgres", psqlInfo)
		if err != nil {
			panic(err)
		}
		//noinspection GoUnhandledErrorResult
		err = db.Ping()
		if err != nil {
			panic(err)
		}
		res, err := db.Exec("CREATE TABLE IF NOT EXISTS gouser (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, username varchar , user_password varchar )")
		if err != nil {
			panic(err)
		}
		log.Printf("table gouser created with result %+v", res)
		instance = &connection{db}
	})
	return instance
}
